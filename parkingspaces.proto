syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.examples.parkingspaces";
option java_outer_classname = "ParkingSpacesProto";
option objc_class_prefix = "HLW";

package parkingspaces;

service ParkingSpaces {

  //Fetch the current state of all the spaces in the parking lot
  rpc fetchAllParkingStates(ParkingSpacesRq) returns (stream ParkingSpaceStatus);

  //Attempt to reserve a parking space in the parking lot
  rpc attemptToReserveSpace(ParkingSpaceReservation) returns (ReservationResponse);

  //Cancel the reservation for a space
  rpc cancelSpaceReservation(ParkingSpaceReservation) returns (ReservationCancelResponse);

}

service ParkingNotifications {

  //Subscribe to the manager to receive updates on parking spaces that have been occupied / reserved
  rpc subscribeToParkingStates(ParkingSpacesRq) returns (stream ParkingSpaceStatus);

  //Subscribe to the state of a certain, already made reservation.
  //If someone parks in the space or you park in another space, there will be a notification immediately
  rpc subscribeToReservationState(ParkingSpaceReservation) returns (stream ReserveStatus);
}

enum SpaceStates {
  OCCUPIED = 0;
  RESERVED = 1;
  FREE = 2;
};

enum ReserveState {
  SUCCESSFUL = 0;
  FAILED_LICENSE_PLATE_ALREADY_HAS_RESERVE = 1;
  FAILED_SPACE_OCCUPIED = 2;
  FAILED_SPACE_RESERVED = 3;
};

enum ReservationState {
  RESERVE_CANCELLED = 0;
  RESERVE_CANCELLED_SPACE_OCCUPIED = 1;
  RESERVE_CANCELLED_PARKED_SOMEWHERE_ELSE = 2;
  RESERVE_CONCLUDED = 3;
};

enum ReserveCancelState {
  CANCELLED = 0;
  NO_RESERVATION_FOR_PLATE = 1;
}

message ParkingSpaceReservation {

  int32 spaceID = 1;

  string licencePlate = 2;

}

message ReservationCancelResponse {
  int32 spaceID = 1;

  ReserveCancelState cancelState = 2;
}

message ReservationResponse {

  int32 spaceID = 1;

  ReserveState response = 2;

}

message ReserveStatus {

  int32 spaceID = 1;

  ReservationState state = 2;

}

message ParkingSpacesRq { }

message ParkingSpaceStatus {

  int32 spaceID = 1;
  
  string spaceSection = 2;

  SpaceStates spaceState = 3;

}

service ParkingSpaceAdministration {

  rpc isPlateInParkingLot(PlateInfo) returns (PlateData);

  rpc currentlyInParkingLot(E) returns (stream PlateData);

  //TODO: Add more administrative RPCs

}

message E {

}

message PlateInfo {
  string licensePlate = 1;
}

message PlateData {
  bool inParkingLot = 1;

  //This is the timestamp of either the latest entrance, latest exit or 0 if the plate
  //Was never in the parking lot
  uint64 timeStamp = 2;

}
